name: 'job: module qa'
on:
  workflow_call:
    inputs:
      defaultLinterVersion:
        description: 'major version of golangci-lint to use (1 or 2), defaults to 1; ignored if a golangci config file is present'
        type: number
        default: 1
      testReportVersion:
        description: 'The version of test-report to use'
        type: string
        required: false
        default: 'latest'

    outputs:
      moduleName:
        value: ${{ jobs.module-info.outputs.moduleName }}
      goVersion:
        value: ${{ jobs.module-info.outputs.goVersion }}
      isPublic:
        value: ${{ jobs.module-info.outputs.isPublic }}
      usesGoReleaser:
        value: ${{ jobs.module-info.outputs.usesGoReleaser }}
      semver:
        value: ${{ jobs.semver.outputs.semver }}
      isTagged:
        value: ${{ jobs.semver.outputs.isTagged }}

jobs:
  semver:
    uses: ./.github/workflows/job.git-semver.yml

  module-info:
    uses: ./.github/workflows/job.module-info.yml
    with:
      defaultLinterVersion: ${{ inputs.defaultLinterVersion }}

  tests:
    name: 'run tests'
    # for a private repository (!isPublic), tests only run on feature branches:
    #
    # - if tests pass on the feature branch it is reasonable to assume that they
    #   will pass when master is rebased on that feature.  We do not rebase on
    #   features with failing tests!
    #
    # - results are NOT published to any code quality services (yet) as all such
    #   services are (currently) on plans which do not support private repositories
    #
    # for a public repository tests run on all branches, including master:
    #
    # - the same assumption about tests passing on feature branches applies to
    #   public repositories, but we need to run the tests to generate coverage and
    #   other artefacts required by code quality services
    #
    # - results are published to code quality services (coveralls, snyk, sonarcloud)
    #
    # - tests do NOT run if the module is already tagged (i.e. a release); this ONLY
    #   arises if go-releaser has failed since this runs AFTER the release tag has
    #   been created; i.e. the pipeline is running in order to re-run go-releaser
    #   on a module that has already been tagged for release and so has already passed
    #   all tests and other qa checks
    if: ${{ ((github.ref != 'refs/heads/master' ) || fromJSON(needs.module-info.outputs.isPublic)) && !fromJSON(needs.semver.outputs.isTagged) }}
    needs:
      - module-info
      - semver
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      # install go
      - name: 'go: install go ${{ needs.module-info.outputs.goVersion }}'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.module-info.outputs.goVersion }}
          cache: false # avoid "file exists" errors from tar: https://github.com/actions/setup-go/issues/403

      # ensure that go.mod is tidy
      - name: 'go mod tidy'
        id: tidy
        run: |
          # a script to determine whether 'go mod tidy' is required

          before=$(cat go.mod go.sum | shasum -a 256)
          echo "::group::go mod tidy output"
            go mod tidy
          echo "::endgroup::"
          after=$(cat go.mod go.sum | shasum -a 256)

          if [[ "$before" != "$after" ]]; then
            echo "::error::'go mod tidy' is required; updated go.mod/go.sum must be committed"
            exit -1
          fi

      # linting
      #
      # the lintVersion output (string) from module-info will be set to 1 or 2 depending
      # on the detected version of golangci-lint to use
      - name: 'lint: identify version (golangci-lint)'
        if: ${{ github.ref != 'refs/heads/master' && needs.module-info.outputs.lintVersion != '1' && needs.module-info.outputs.lintVersion != '2'}}
        run: |
          echo "::warning::unsupported golangci-lint version"
          echo -e "## :warning: &nbsp; Module QA\n" >> $GITHUB_STEP_SUMMARY
          echo -e ":information_source: &nbsp; no action is configured for golangci-lint v${{ needs.module-info.outputs.lintVersion }}\n" >> $GITHUB_STEP_SUMMARY

      - name: 'lint: run v1 (golangci-lint)'
        if: ${{ github.ref != 'refs/heads/master' && needs.module-info.outputs.lintVersion == '1'}}
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

      - name: 'lint: run v2 (golangci-lint)'
        if: ${{ github.ref != 'refs/heads/master' && needs.module-info.outputs.lintVersion == '2'}}
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

      # if we get this far then we have a module which has passed basic hygiene
      # checks and is ready to run any tests

      # install test-report
      - name: 'install test-report'
        run: |
          # a script to download and run blugnu/test-report

          ver="${{ inputs.testReportVersion }}"
          [[ "$ver" =~ "^v.*" ]] && ver="${ver:1}"
          if [[ "$ver" == "latest" ]]; then
            ver=$(curl -s https://api.github.com/repos/blugnu/test-report/releases/latest | jq -r '.tag_name' | cut -c 2-)
            echo "downloading (latest): v$ver"
          else
            echo "downloading: v$ver"
          fi

          # download test-report from blugnu/test-report/releases
          curl -LO https://github.com/blugnu/test-report/releases/download/v${ver}/test-report_${ver}_linux_amd64.tar.gz
          tar -xvzf test-report_${ver}_linux_amd64.tar.gz test-report
          rm test-report_${ver}_linux_amd64.tar.gz

          if [[ ! -f "test-report" ]]; then
            echo "::warning::test-report could not be installed"
            echo -e "## :warning: &nbsp; Module QA\n" >> $GITHUB_STEP_SUMMARY
            echo -e ":information_source: &nbsp; `test-report` could not be installed\n" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "::group::test-report version"
            ./test-report version
          echo "::endgroup::"

      # run tests
      - name: 'go test'
        run: |
          go mod download

          if [[ -f test-report ]]; then
            result=$((go test ./... -coverprofile=coverprofile -v -json | ./test-report) && echo "PASS" || echo "FAIL")
            
            # add test report to the job summary
            report=$(cat test-report.md)
            echo -e "$report\n" >> $GITHUB_STEP_SUMMARY

            if [[ "$result" == "FAIL" ]]; then
              echo "::error::tests failed"
              exit 1
            fi
          else
            go test -v -coverprofile=coverprofile ./...
          fi

      - name: 'upload [coverprofile] artifact'
        uses: actions/upload-artifact@v4
        with:
          name: coverprofile
          path: coverprofile

  coveralls:
    name: 'coveralls: send coverage'
    if: ${{ (github.ref == 'refs/heads/master') && fromJSON(needs.module-info.outputs.isPublic) && !fromJSON(needs.semver.outputs.isTagged) }}
    needs:
      - semver
      - module-info
      - tests # for sequencing; coveralls requires the coverprofile artefact uploaded by tests
    runs-on: ubuntu-latest
    steps:
      - name: 'checkout'
        uses: actions/checkout@v4

      - name: 'download artifact [coverprofile]'
        uses: actions/download-artifact@v4
        with:
          name: coverprofile

      - name: 'send coverage'
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: coverprofile

  snyk:
    name: 'snyk: scan for vulnerabilities'
    if: ${{ fromJSON(needs.module-info.outputs.isPublic) && !fromJSON(needs.semver.outputs.isTagged) }}
    needs:
      - semver
      - module-info
      - tests # for job sequencing; we only want to run snyk if tests have passed
    uses: ./.github/workflows/job.snyk.yml
    secrets: inherit

  sonarcloud:
    name: 'sonarcloud: perform analysis'
    if: ${{ fromJSON(needs.module-info.outputs.isPublic) && !fromJSON(needs.semver.outputs.isTagged) }}
    needs:
      - semver
      - module-info
      - tests # for job sequencing; we only want to run sonarcloud if tests have passed
    uses: ./.github/workflows/job.sonarcloud.yml
    with:
      moduleName: ${{ needs.module-info.outputs.moduleName }}
      moduleVersion: ${{ needs.semver.outputs.semver }}
    secrets: inherit
