name: 'job: module qa'
on:
  workflow_call:
    inputs:
      testReportVersion:
        description: 'The version of test-report to use'
        type: string
        required: false
        default: 'latest'
    outputs:
      moduleName:
        value: ${{ jobs.module-info.outputs.moduleName }}
      goVersion:
        value: ${{ jobs.module-info.outputs.goVersion }}
      serviceName:
        value: ${{ jobs.module-info.outputs.serviceName }}
      ingressPath:
        value: ${{ jobs.module-info.outputs.ingressPath }}
      semver:
        value: ${{ jobs.gitlog.outputs.semver }}
      isTagged:
        value: ${{ jobs.gitlog.outputs.isTagged }}
      isPublic:
        value: ${{ jobs.repo-visibility.outputs.isPublic }}
      usesGoReleaser:
        value: ${{ jobs.module-info.outputs.usesGoReleaser }}
  
jobs:
  gitlog:
    uses: ./.github/workflows/job.git-log.yml

  module-info:
    uses: ./.github/workflows/job.module-info.yml

  repo-visibility:
    runs-on: ubuntu-latest
    outputs:
      isPublic: ${{ steps.visibility.outputs.isPublic }}
    steps:
      - name: 'github: repo visibility'
        id: visibility
        run: |
          OUTPUT=$(curl --header "Authorization: token ${{ github.token }}" https://api.github.com/repos/${{ github.repository }})
          echo "::group::api result"
            echo "$OUTPUT"
          echo "::endgroup::"

          case $(echo $OUTPUT | jq ".private") in
            false) isPublic=true
            ;;
            
            true) isPublic=false
            ;;
            
            *) echo "::error::unable to get repository info:$(echo $OUTPUT | jq '.message')"
            exit -1
            ;;
          esac
          echo "isPublic=$isPublic" >> $GITHUB_OUTPUT

          echo "::group::outputs"
            cat $GITHUB_OUTPUT
          echo "::endgroup::"

  qa:
    if: ${{ (github.ref != 'refs/heads/master' ) || (needs.repo-visibility.outputs.isPublic == 'true' ) }}
    needs:
      - module-info
      - repo-visibility
    outputs:
      isPublic: ${{ needs.repo-visibility.outputs.isPublic }}
      moduleName: ${{ needs.module-info.outputs.moduleName }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: 'setup: go ${{ needs.module-info.outputs.goVersion }}'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.module-info.outputs.goVersion }}
          cache: false   # avoid "file exists" errors from tar: https://github.com/actions/setup-go/issues/403

      - name: 'setup: test-report'
        run: |
          # a script to download and run blugnu/test-report

          ver="${{ inputs.testReportVersion }}"
          [[ "$ver" =~ "^v.*" ]] && ver="${ver:1}"
          if [[ "$ver" == "latest" ]]; then
            ver=$(curl -s https://api.github.com/repos/blugnu/test-report/releases/latest | jq -r '.tag_name' | cut -c 2-)
            echo "downloading (latest): v$ver"
          else
            echo "downloading: v$ver"
          fi

          # download test-report from blugnu/test-report/releases
          curl -LO https://github.com/blugnu/test-report/releases/download/v${ver}/test-report_${ver}_linux_amd64.tar.gz
          tar -xvzf test-report_${ver}_linux_amd64.tar.gz test-report
          rm test-report_${ver}_linux_amd64.tar.gz
          
          if [[ ! -f "test-report" ]]; then
            echo "::warning::test-report could not be installed"
            exit 0
          else
            echo "::group::test-report version"
              ./test-report version
            echo "::endgroup::"
          fi
    
      - name: 'go: lint'
        if: ${{ github.ref != 'refs/heads/master' }}
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

      - name: 'go: test'
        run: |
          go mod download

          if [[ -f test-report ]]; then
            result=$((go test ./... -coverprofile=coverprofile -json | ./test-report) && echo "PASS" || echo "FAIL")
            
            # add test report to the job summary
            report=$(cat test-report.md)
            echo -e "$report\n" >> $GITHUB_STEP_SUMMARY

            if [[ "$result" == "FAIL" ]]; then
              echo "::error::tests failed"
              exit 1
            fi
          else
            go test -v -coverprofile=coverprofile ./...
          fi

      - name: 'artifact: upload [coverprofile]'
        uses: actions/upload-artifact@v4
        with:
          name: coverprofile
          path: coverprofile

  coveralls:
    if: ${{ (github.ref == 'refs/heads/master') && (needs.qa.outputs.isPublic == 'true') && (needs.gitlog.outputs.isTagged == 'false') }}
    needs:
      - gitlog
      - qa
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'artifact: download [coverprofile]'
        uses: actions/download-artifact@v4
        with:
          name: coverprofile

      - name: 'coveralls: send coverage'
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: coverprofile

  sonarcloud:
    if: ${{ needs.qa.outputs.isPublic == 'true' && (needs.gitlog.outputs.isTagged == 'false') }}
    needs:
      - gitlog
      - qa
    uses: ./.github/workflows/job.sonarcloud.yml
    with:
      moduleName: ${{ needs.qa.outputs.moduleName }}
      moduleVersion: ${{ needs.gitlog.outputs.semver }}
    secrets: inherit
