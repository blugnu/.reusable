name: 'job: create release'
on:
  workflow_call:
    inputs:
      version:
        description: 'the version to be released; a tag must already exist for this version'
        type: string
        required: true
      goVersion:
        description: 'the version of Go to use (only required if the release produces go binaries)'
        type: string
        required: false
      dryRun:
        description: 'if true then no release is created; typically set to true when executing on a non-release branch'
        type: boolean
        required: false
        default: false
jobs:
  preflight:
    runs-on: ubuntu-latest
    outputs:
      CONFIG_VERSION: ${{ steps.config.outputs.VERSION }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # FUTURE: verify that specified tag exists 
      # - name: 'release: check for tag'
      #   id: tag
      #   run: |
      #     if [[ -z "$(git tag --points-at HEAD)" ]]; then
      #       echo "::error::no tag found"
      #       exit 1
      #     fi

      - name: 'release: check configuration'
        id: config
        run: |
          # a script to check for the presence and syntax version of .goreleaser.yml file

          if [[ ! -f .goreleaser.yml ]]; then
            echo "::error::no .goreleaser.yml"
            exit 1
          fi

          if [[ -z "$(cat .goreleaser.yml)" ]]; then
            echo "::error::.goreleaser.yml is empty"
            exit 1
          fi
          
          ver=$(grep -Eo "^version: [12]$" .goreleaser.yml | awk '{print $2}')  
          if [[ $ver == "1" ]]; then  
            echo "::warn::.goreleaser.yml should be updated to version 2 syntax"  
            echo -e "### :warning: .goreleaser.yml should be updated to version 2 syntax\n" >> $GITHUB_STEP_SUMMARY  
            echo -e "> _from: job.create-release.yml_" >> $GITHUB_STEP_SUMMARY  
          elif [[ $ver != "2" ]]; then  
            echo "::error::.goreleaser.yml configuration version $ver is not supported (version 1 and 2 are supported)"  
            echo -e "### :no_entry: Unsupported GoReleaser Configuration\n" >> $GITHUB_STEP_SUMMARY  
            echo "Detected version $ver; versions 1 and 2 are supported" >> $GITHUB_STEP_SUMMARY  
            echo -e "> _from: job.create-release.yml_" >> $GITHUB_STEP_SUMMARY  
            exit 1  
          fi  

          echo "found valid .goreleaser.yml:-"
          awk '{print "| "$0}' .goreleaser.yml

          echo "VERSION=$ver" >> $GITHUB_OUTPUT

          echo "::group::outputs"
            cat $GITHUB_OUTPUT
          echo "::endgroup::"            

  create:
    if: ${{ !inputs.dryRun }}
    runs-on: ubuntu-latest
    needs:
      - preflight
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # install Go and download dependencies
      - name: 'go: setup ${{ inputs.goVersion }}'
        if: ${{ (inputs.goVersion != '') }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.goVersion }}
          cache: false   # avoid "file exists" errors from tar: https://github.com/actions/setup-go/issues/403
    
      - name: 'go: dependencies'
        id: go
        if: ${{ (inputs.goVersion != '') }}
        run: |
          # download dependencies and determine the exact version of go installed
          go mod download

          echo "VERSION=$(go version)" >> $GITHUB_OUTPUT

          echo "::group::outputs"
            cat $GITHUB_OUTPUT
          echo "::endgroup::"            

      # create the release
      - name: 'release: goreleaser (v5)'
        if: ${{ needs.preflight.outputs.CONFIG_VERSION == '1' }}
        uses: goreleaser/goreleaser-action@v6
        with:
          # args: release --clean ${{ steps.config.outputs.config }}
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GO_VERSION: ${{ steps.go.outputs.VERSION }}
      - name: 'release: goreleaser (v6)'
        if: ${{ needs.preflight.outputs.CONFIG_VERSION == '2' }}
        uses: goreleaser/goreleaser-action@v6
        with:
          # args: release --clean ${{ steps.config.outputs.config }}
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GO_VERSION: ${{ steps.go.outputs.VERSION }}

  dry-run:
    if: ${{ inputs.dryRun }}
    runs-on: ubuntu-latest
    name: 'dry run'
    needs:
      - preflight
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'release: dry run'
        run: |
          # dry run
          echo "this is a dry run; a release would otherwise be created with the following configuration:"
          echo ""
          echo "version: ${{ inputs.version }}"
          if [[ -z "${{ inputs.goVersion }}" ]]; then
            echo "go version: [none]"
          else
            echo "go version: ${{ inputs.goVersion }}"
          fi
          echo ""
          echo ".goreleaser.yml:-"
          if [[ -f .goreleaser.yml ]]; then
            awk '{print "| "$0}' .goreleaser.yml
          else
            echo "::error::no .goreleaser.yml"
            exit 1
          fi
