name: ModuleInfo

on:
  workflow_call:
    inputs:
      path:
        description: 'path to go.mod'
        type: string
        default: '.'
    outputs:
      moduleName:
        value: ${{ jobs.module-info.outputs.moduleName }}
      serviceName:
        value: ${{ jobs.module-info.outputs.serviceName }}
      ingressPath:
        value: ${{ jobs.module-info.outputs.ingressPath }}
      gitVersion:
        value: ${{ jobs.module-info.outputs.gitVersion }}
      goVersion:
        value: ${{ jobs.module-info.outputs.goVersion }}

jobs:
  module-info:
    outputs:
      moduleName: ${{ steps.info.outputs.moduleName }}
      goVersion: ${{ steps.info.outputs.goVersion }}
      gitVersion: ${{ steps.info.outputs.gitVersion }}
      serviceName: ${{ steps.info.outputs.serviceName }}
      ingressPath: ${{ steps.info.outputs.ingressPath }}
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # get tags and branches for gitversion

    - name: 'setup: gitversion'
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
    - name: 'gitversion: execute'
      id:   gitversion # id to later be referenced
      uses: gittools/actions/gitversion/execute@v0

    - name: 'go.mod: parse'
      id: info
      shell: bash --noprofile --norc {0}
      run: |
        modfile="${{ inputs.path }}/go.mod"
        if [[ ! -f $modfile ]]; then
          echo "::error::$modfile does not exist"
          exit -1
        fi

        mod=$(cat $modfile)
        echo "::group::$modfile"
          echo "$mod"
        echo "::endgroup::"
        
        # get module name from go.mod
        module=$(echo "$mod" | grep -E "^module " -m 1); module=${module##* }; module=${module%% *}
        
        # remove any /vNN version suffix ...
        if [[ ! -z $(echo "$module" | grep -E "^.*/v[0-9]+$") ]]; then
          while [[ ! -z $(echo "$module" | grep -E "^.*/v[0-9]+$") ]]; do module=${module%?}; done
          module=${module%??}
        fi
        
        # get go version from go.mod
        gover=$(echo "$mod" | grep -E "^go "); gover=${gover##* }; gover=${gover%% *}
        
        # get service name from go.mod
        service=$(echo "$mod" | grep -E "^//service:name:" -m 1); service=${service##*:}
        
        # if the service name is not explicitly set but a //service comment is
        # present then use the module name as the service name (without host.tld/ prefix)
        if [[ -z $service && ! -z $(echo "$mod" | grep -E "^//service[\s]*$") ]]; then
          if [[ ! -z $(echo "$module" | grep "/") ]]; then service=${module##*/}; fi
          if [[ -z $service ]]; then service=$module; fi
        fi
        service=${service%% *}
        
        # get ingress path from go.mod
        ingress=$(echo "$mod" | grep -E "^//ingress:path:" -m 1); ingress=${ingress##*:}
        
        gitver=$(echo "${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.preReleaseLabel }}" | tr '[:upper:]' '[:lower:]')
        
        echo "::group::results/outputs"
          echo "moduleName  : $module"
          echo "goVersion   : $gover"
          echo "gitVersion  : $gitver"
          echo "serviceName : $service"
          echo "ingressPath : $ingress"

          echo "moduleName=$module" >> $GITHUB_OUTPUT
          echo "goVersion=$gover" >> $GITHUB_OUTPUT
          echo "gitVersion=$gitver" >> $GITHUB_OUTPUT
          echo "serviceName=$service" >> $GITHUB_OUTPUT
          echo "ingressPath=$ingress" >> $GITHUB_OUTPUT
        echo "::endgroup::"
