name: ModuleQualityAssurance
on:
  workflow_call:
    outputs:
      moduleName:
        value: ${{ jobs.module-info.outputs.moduleName }}
      version:
        value: ${{ jobs.module-info.outputs.version }}
      isTagged:
        value: ${{ jobs.gitlog.outputs.isTagged }}
      releaseComment:
        value: ${{ jobs.gitlog.outputs.releaseComment }}
      goVersion:
        value: ${{ jobs.module-info.outputs.goVersion }}
      serviceName:
        value: ${{ jobs.module-info.outputs.serviceName }}
      ingressPath:
        value: ${{ jobs.module-info.outputs.ingressPath }}
      isPublic:
        value: ${{ jobs.repo-visibility.outputs.isPublic }}
  
jobs:
  gitlog:
    uses: ./.github/workflows/gitlog.yml
            
  module-info:
    uses: ./.github/workflows/module-info.yml

  repo-visibility:
    runs-on: ubuntu-latest
    outputs:
      isPublic: ${{ steps.visibility.outputs.isPublic }}
    steps:
      - name: 'github: repo visibility'
        id: visibility
        run: |
          OUTPUT=$(curl --header "Authorization: token ${{ github.token }}" https://api.github.com/repos/${{ github.repository }})
          echo "::group::api result"
            echo "$OUTPUT"
          echo "::endgroup::"

          case $(echo $OUTPUT | jq ".private") in
            false) isPublic=true
            ;;
            
            true) isPublic=false
            ;;
            
            *) echo "::error::unable to get repository info:$(echo $OUTPUT | jq '.message')"
            exit -1
            ;;
          esac
          echo "isPublic=$isPublic" >> $GITHUB_OUTPUT

          echo "::group::outputs"
            cat $GITHUB_OUTPUT
          echo "::endgroup::"

  qa:
    if: ${{ (github.ref != 'refs/heads/master' ) || (needs.repo-visibility.outputs.isPublic == 'true' ) }}
    needs:
      - module-info
      - repo-visibility
    outputs:
      version: ${{ needs.module-info.outputs.version }}
      isPublic: ${{ needs.repo-visibility.outputs.isPublic }}
      moduleName: ${{ needs.module-info.outputs.moduleName }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      
      - name: 'setup: go ${{ needs.module-info.outputs.goVersion }}'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.module-info.outputs.goVersion }}
        
      - name: 'go: lint'
        if: ${{ github.ref != 'refs/heads/master' }}
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      - name: 'go: test'
        run: go mod download && go test -v -coverprofile=coverprofile ./...

      - name: 'artifact: upload [coverprofile]'
        uses: actions/upload-artifact@v4
        with:
          name: coverprofile
          path: coverprofile

  coveralls:
    if: ${{ (github.ref == 'refs/heads/master') && (needs.qa.outputs.isPublic == 'true') }}
    needs:
      - qa
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'artifact: download [coverprofile]'
        uses: actions/download-artifact@v4
        with:
          name: coverprofile

      - name: 'coveralls: send coverage'
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: coverprofile

  sonarcloud:
    if: ${{ needs.qa.outputs.isPublic == 'true' }}
    needs:
      - qa
    uses: ./.github/workflows/sonarcloud.yml
    with:
      moduleName: ${{ needs.qa.outputs.moduleName }}
      moduleVersion: ${{ needs.qa.outputs.version }}
    secrets: inherit
