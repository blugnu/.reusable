name: 'job: git log analysis'
on:
  workflow_call:
    # If the HEAD commit is tagged with a semver version then semver will be
    # that version and isTagged will be true.
    #
    # If the HEAD commit is not tagged or is tagged with some tag that is not a
    # semver version, then isTagged will be false and semver will be the next
    # semantic version based on the conventional commits in the log since the
    # most recent semver tag.
    outputs:
      semver:
        value: ${{ jobs.semver.outputs.semver }}
        description: "The semantic version of the HEAD commit or the next version based on conventional commits since the most recent semver tag"
      isTagged:
        value: ${{ jobs.semver.outputs.isTagged }}
        description: "true if the semver output is an existing tag; false if the semver output is the next version, yet to be tagged"
jobs:
  semver:
    name: 'git log analysis'
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.gitlog.outputs.semver }}
      isTagged: ${{ steps.gitlog.outputs.isTagged }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # required to have a log to analyse          

      - name: 'gitlog'
        id: gitlog
        shell: bash --noprofile --norc {0}
        run: |
          # script to identify the semantic version from conventional commits in the git log and preview the release change log

          semver=""
          isTagged=false
          
          tags=$(git tag --sort=-creatordate)
          if [[ -z "$tags" ]]; then
            # no previous tag; this is the initial release but we must also
            # check that the repo was cloned with a non-empty master branch

            if [[ ! -z $(git log origin/master..HEAD --oneline | grep "fatal:ambiguous argument 'origin/master..HEAD'") ]]; then
              echo "::warning::${{ github.ref }} not parented on 'master'; did you forget to clone a non-empty master branch when initialising this repo?"
            fi
            log=$(git log --oneline)
          else
            # get the most recent release semver tag
            # and the log since that tag
            tag=$(echo "$tags" | grep -m 1 -E "^[v]{0,1}(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$")
            log=$(git log $tag..HEAD --oneline)
          fi
          echo "::group::log"
            echo "$log"
          echo "::endgroup::"

          regex="^[v]{0,1}([0-9]+)\.([0-9]+)\.([0-9]+).*"
          major=0; minor=0; patch=0
          if [[ $tag =~ $regex ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"
          fi

          if [[ ! -z $log ]]; then
            # determine the next semver based on any conventional commits in the log
            # --oneline log format is: xxxxxxx <commit type>[(<scope>)]: <message>
            
            badRefactorings=$(echo "log" | grep -E "^[0-9a-f]{7} (refactor!|refactor\(.*\)!): .+" -c)
            breaking=$(echo "$log"       | grep -E "^[0-9a-f]{7} (feat!|feat\(.*\)!|fix!|fix\(.*\)!): .+" -c)
            fixes=$(echo "$log"          | grep -E "^[0-9a-f]{7} (fix|fix\(.*\)): .+" -c)
            features=$(echo "$log"       | grep -E "^[0-9a-f]{7} (feat|feat\(.*\)): .+" -c)
            refactorings=$(echo "$log"   | grep -E "^[0-9a-f]{7} (refactor|refactor\(.*\)): .+" -c)

            echo "::group::conventional commits"
              echo "badRefactorings=$badRefactorings"
              echo "breaking=$breaking"
              echo "fixes=$fixes"
              echo "features=$features"
              echo "refactorings=$refactorings"
            echo "::endgroup::"

            if [[ $badRefactorings -gt 0 ]]; then
              echo "::error::refactoring commits cannot be breaking changes; rewrite with a more appropriate commit type (feat!/fix!)"
              exit 1
            fi
            #TODO: warn if there are any BREAKING CHANGE commits (recommend fix!/feature! as preferred)

            semver="?"
            if [[ $breaking -gt 0 ]]; then
              major=$((major+1))
              minor=0
              patch=0
            elif [[ $features -gt 0 ]]; then
              minor=$((minor+1))
              patch=0
            elif [[ $fixes -gt 0 || refactorings -gt 0 ]]; then
              patch=$((patch+1))
            elif [[ ! -z $tag ]]; then
              # no significant commits found but there is an existing release tag
              patch=$((patch+1))
            else
              # no significant commits found and there is no prior tag
              # so this will be the initial release (v0.1.0 by convention)
              major=0; minor=1; patch=0
            fi
          fi
          [[ "$semver" == "?" ]] && semver="v$major.$minor.$patch"
          
          # if not master add a semver label identifying the branch
          # and emit an (approximate) preview of the release notes

          branch="${{ github.ref }}"
          branch=$(echo "$branch" | sed -E "s/refs\/heads\///")

          if [[ "$branch" != "master" ]]; then
            semver+="-$branch"

            echo -e "### $semver\n" >> $GITHUB_STEP_SUMMARY
            echo -e "> _:point_right: will be tagged as v$major.$minor.$patch when merged_\n" >> $GITHUB_STEP_SUMMARY
            project="https://github.com/${{ github.repository }}"
            changelog=""
            regex="^([0-9a-f]{7}) (.+)$"
            while read entry; do
              if [[ ! $entry =~ $regex ]]; then
                continue
              fi
              sha="${BASH_REMATCH[1]}"
              msg="${BASH_REMATCH[2]}"
              changelog+="[<code>$sha</code>]($project/commit/$sha) $msg\n"
            done <<< "$log"
            
            echo -e "### :clipboard: &nbsp;&nbsp; change log \n" >> $GITHUB_STEP_SUMMARY
            echo -e "$changelog\n" >> $GITHUB_STEP_SUMMARY
          fi

          echo "semver=$semver" >> $GITHUB_OUTPUT
          echo "isTagged=$isTagged" >> $GITHUB_OUTPUT

          echo "::group::outputs"
            cat $GITHUB_OUTPUT
          echo "::endgroup::"
